// prisma/schema.prisma

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum TokenType {
  REFRESH
  ACCESS
}

model JwtToken {
  id              String    @id @default(uuid())
  account_id      String
  token           String    @unique
  type            TokenType
  active          Boolean   @default(true)   
  created_at      DateTime  @default(now())
  updated_at      DateTime  @updatedAt
  expires_at      DateTime

  //relations
  account         Account   @relation(fields: [account_id], references: [id])
}

model Account {
  id            String      @id @default(uuid())
  username      String      @unique
  password      String
  re_password   String?
  role          String      @default("USER")
  user_id       String      @unique
  tokens        JwtToken[]
  created_at    DateTime    @default(now())
  updated_at    DateTime    @updatedAt

  //relations
  user          User        @relation(fields: [user_id], references: [id])
}

model User {
  id              String    @id @default(uuid())
  name            String
  plain_name      String?
  birthday        String?
  phone           String?
  email           String    @unique
  role            String?
  code            String?
  sex             String?
  address         String?
  mi_id           String?
  major_id        String?
  is_graduated    Boolean   @default(false)
  is_student      Boolean   @default(true)
  active          Boolean   @default(true)
  deleted         Boolean   @default(false)
  created_at      DateTime  @default(now())
  updated_at      DateTime  @updatedAt
  created_by      String?
  updated_by      String?

  // relations
  major_intake    MajorIntake?  @relation(fields: [mi_id], references: [id])
  major           Major?        @relation(fields: [major_id], references: [id])
  account         Account?
  class           Class[]
  studentCourses  StudentCourse[]
  ClassRegist     ClassRegist[]
  ClassAttend     ClassAttend[]
  ExamRegist      ExamRegist[]
  ExamAttend      ExamAttend[]
  ExamGrade       ExamGrade[]
}

model Major {
  id              String     @id @default(uuid())
  name            String
  plain_name      String?
  description     String?
  deleted         Boolean   @default(false)
  created_at      DateTime  @default(now())
  updated_at      DateTime  @updatedAt
  created_by      String?
  updated_by      String?

  users           User[]
  major_intake    MajorIntake[]
  classes         Class[]
  exam            Exam[]
}

model Semester {
  id              String     @id @default(uuid())
  name            String
  plain_name      String
  start_date      String
  end_date        String
  deleted         Boolean   @default(false)
  created_at      DateTime  @default(now())
  updated_at      DateTime  @updatedAt
  created_by      String?
  updated_by      String?

  class           Class[]
  exam            Exam[]
}

model MajorIntake {
  id              String    @id @default(uuid())
  major_id        String
  intake          String
  head_teacher_id String?
  total_weight    Float?
  deleted         Boolean   @default(false)
  created_at      DateTime  @default(now())
  updated_at      DateTime  @updatedAt
  created_by      String?
  updated_by      String?

  major           Major     @relation(fields: [major_id], references: [id])
  users           User[]
  major_intake_course MajorIntakeCourse[]
}

model MajorIntakeCourse {
  id              String    @id @default(uuid())
  mi_id           String
  course_id       String

  major_intake   MajorIntake @relation(fields: [mi_id], references: [id])
  course         Course      @relation(fields: [course_id], references: [id])
}

model Course {
  id              String    @id @default(uuid())
  major_id        String?
  name            String
  plain_name      String
  weight          Int?
  description     String?
  parent_id       String?
  deleted         Boolean   @default(false)
  created_at      DateTime  @default(now())
  updated_at      DateTime  @updatedAt
  created_by      String?
  updated_by      String?


  major_intake_courses MajorIntakeCourse[]
  parent    Course?    @relation("CourseToChildren", fields: [parent_id], references: [id])
  children  Course[]   @relation("CourseToChildren")
  class     Class[]
  StudentCourse StudentCourse[]
  exam      Exam[]
}

model Class {
  id              String    @id @default(uuid())
  course_id       String
  semester_id     String
  major_id        String?
  name            String
  status          String    @default("new")
  regist_status   String    @default("closed")
  max_student     Int?
  plain_name      String
  lecturer_id     String
  description     String?
  location        String?
  deleted         Boolean   @default(false)
  created_at      DateTime  @default(now())
  updated_at      DateTime  @updatedAt
  created_by      String?
  updated_by      String?

  course          Course    @relation(fields: [course_id], references: [id])
  semester        Semester  @relation(fields: [semester_id], references: [id])
  lecturer        User      @relation(fields: [lecturer_id], references: [id])
  major           Major?     @relation(fields: [major_id], references: [id])
  ClassRegist     ClassRegist[]
  ClassAttend     ClassAttend[]
  exam            Exam[]
}

model StudentCourse {
  id              String  @id @default(uuid())
  exam_status     String
  student_id      String
  course_id       String
  last_exam_id    String?

  course          Course  @relation(fields: [course_id], references: [id])
  student         User    @relation(fields: [student_id], references: [id])
}

model ClassRegist {
  id              String  @id @default(uuid())
  student_id      String
  class_id        String
  status          String  @default("pending")
  created_at      DateTime @default(now())

  student         User    @relation(fields: [student_id], references: [id])
  class           Class   @relation(fields: [class_id], references: [id])
}

model ClassAttend {
  id              String  @id @default(uuid())
  student_id      String
  class_id        String

  student         User    @relation(fields: [student_id], references:[id])
  class           Class   @relation(fields: [class_id], references: [id])
}

model Exam {
  id              String    @id @default(uuid())
  major_id        String
  course_id       String
  class_id        String?
  semester_id     String?
  name            String
  plain_name      String
  date            String?
  place           String?
  status          String    @default("new")
  regist_status   String    @default("closed")
  deleted         Boolean   @default(false)
  created_at      DateTime  @default(now())
  updated_at      DateTime  @updatedAt
  created_by      String?
  updated_by      String?

  major           Major     @relation(fields: [major_id], references: [id])
  course          Course    @relation(fields: [course_id], references: [id])
  class           Class?    @relation(fields: [class_id], references: [id])
  semester        Semester? @relation(fields: [semester_id], references: [id])
  ExamAttend      ExamAttend[]
  ExamRegist      ExamRegist[]
  ExamGrade       ExamGrade[]
}

model ExamRegist {
  id              String    @id @default(uuid())
  student_id      String
  exam_id         String
  status          String    @default("pending")
  created_at      DateTime  @default(now())

  student         User      @relation(fields: [student_id], references: [id])
  exam            Exam      @relation(fields: [exam_id], references: [id])
}

model ExamAttend {
  id              String    @id @default(uuid())
  student_id      String
  exam_id         String
  status          String?

  student         User      @relation(fields: [student_id], references:[id])
  exam            Exam      @relation(fields: [exam_id], references: [id])
}

model ExamGrade {
  id              String    @id @default(uuid())
  student_id      String
  exam_id         String
  grade           Float
  is_passed       Boolean   @default(true)
  created_at      DateTime  @default(now())
  updated_at      DateTime  @updatedAt

  student         User      @relation(fields: [student_id], references: [id])
  exam            Exam      @relation(fields: [exam_id], references: [id])
}

model Notification {
  id              String    @id @default(uuid())
  title           String
  content         String
  object_type     String?
  object_id       String?
  created_at      DateTime  @default(now())
  updated_at      DateTime  @updatedAt
  created_by      String?
  updated_by      String?

  notificationUser  NotificationUser[]
}

model NotificationUser {
  id              String        @id @default(uuid())
  notification_id String
  user_id         String
  is_read         Boolean       @default(false)
  is_deleted      Boolean       @default(false)
  created_at      DateTime      @default(now())
  updated_at      DateTime      @updatedAt

  notification    Notification  @relation(fields: [notification_id], references: [id])
}

model Timetable {
  id              String        @id @default(uuid())
  major_id        String?
  mi_id           String?
  name            String
  description     String?
  location        String?
  day             String
  period          String
  time_start      String?
  time_end        String?
  object_type     String
  object_id       String?
  is_deleted      Boolean       @default(false)
  created_at      DateTime      @default(now())
  updated_at      DateTime      @updatedAt
  created_by      String?
}